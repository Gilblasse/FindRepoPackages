{"version":3,"sources":["../../src/app/EvalRepo.js"],"names":["latestVersion","require","getPackageJson","baseUrl","page","packageType","url","waitUntil","response","errorMessage","arr","_status","evaluate","repoPackageTable","document","querySelector","innerText","repoPackage","JSON","parse","scrapedData","depends","Object","entries","dependencies","console","log","i","length","latestV","push","afterArr","getGemFile","status","initialGems","gems","tableList","querySelectorAll","trs","values","map","tr","trim","gemsRows","filter","row","match","r","includes","gemsData","gem","newGem","split","slice","endGems","getPythonDependencies","matches","pyDepends","s","st","flat","idx","search","substring","module","exports","languageType","exe"],"mappings":"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","sourcesContent":["// import latestVersion from 'latest-version'\r\nconst latestVersion = require('latest-version')\r\n\r\n\r\n// SCRAPE JAVASCRIPT PACAKGES\r\nconst getPackageJson = async (baseUrl, page, packageType) => {\r\n    const response = await page.goto(`${baseUrl}${packageType.url}`, { waitUntil: 'networkidle2' } );\r\n    let errorMessage = \"Not Found\"\r\n    let arr = []\r\n\r\n    if(response._status == 200){\r\n        const scrapedData = await page.evaluate(() =>{\r\n            const repoPackageTable = document.querySelector('table').innerText\r\n            const repoPackage = JSON.parse(repoPackageTable)\r\n        \r\n            return repoPackage\r\n        })\r\n\r\n        const depends = Object.entries(scrapedData.dependencies)\r\n        console.log({depends})\r\n\r\n        for(let i=0; i < depends.length; i++ ){\r\n            const latestV = await latestVersion(depends[i][0])\r\n            arr.push([...depends[i],latestV])\r\n        }\r\n\r\n        console.log({afterArr: arr})\r\n    }\r\n\r\n    console.log({arr})\r\n    return response._status == 200 ? arr : errorMessage\r\n}\r\n\r\n\r\n\r\n\r\n// SCRAPE RUBY PACAKGES\r\nconst getGemFile = async (baseUrl, page, packageType) => {\r\n    const response = await page.goto(`${baseUrl}${packageType.url}`, { waitUntil: 'networkidle2' } );\r\n    let errorMessage = \"Not Found\"\r\n    let gems;\r\n\r\n    console.log({status: response._status})\r\n    console.log({initialGems: gems})\r\n\r\n    if(response._status == 200){\r\n        gems = await page.evaluate(() =>{\r\n            const tableList = document.querySelectorAll('tr')\r\n            const trs = Object.values(tableList).map(tr => tr.innerText.trim())\r\n            const gemsRows = trs.filter(row => row.match(/(?<=gem)(.*)(?=')/gs)).filter(r => !r.includes('source') && !r.includes('#'))\r\n\r\n            const gemsData = gemsRows.map(gem => {\r\n                newGem = gem.split(/^(.+?),/)\r\n                return newGem.length == 1 ? newGem : newGem.slice(1)\r\n            })\r\n\r\n            return gemsData\r\n        })\r\n\r\n        console.log({gems})\r\n    }\r\n\r\n    console.log({endGems: gems})\r\n    return response._status == 200 ? gems : errorMessage\r\n}\r\n\r\n\r\n\r\n// SCRAPE PYTHON PACKAGES\r\nconst getPythonDependencies = async (baseUrl, page, packageType) => {\r\n    const response = await page.goto(`${baseUrl}${packageType.url}`, { waitUntil: 'networkidle2' } );\r\n    let errorMessage = \"Not Found\"\r\n    let dependencies;\r\n\r\n    if(response._status == 200){\r\n        dependencies = await page.evaluate(() =>{\r\n            const tableList = document.querySelector('table').innerText\r\n            const matches = tableList.match(/(?<= = \\[\\n)(.*?)(?=])/gs)\r\n            const pyDepends = matches.map(s=> s.split(/,\\n/).filter(st=> st.trim().length !== 0)).flat().map(s => s.trim())\r\n\r\n            depends = pyDepends.map(s => {\r\n                idx = s.search(/[^'\\d a-z | A-Z ]\\W/)\r\n                return idx == -1 ? [s] : [ s.substring(0,idx),s.substring(idx) ]\r\n            })\r\n\r\n            return depends\r\n        })\r\n    }\r\n    \r\n    return response._status == 200 ? dependencies : errorMessage\r\n}\r\n\r\n\r\n\r\nmodule.exports = languageType = {\r\n    \"JavaScript\": {url: \"/blob/master/package.json\", exe: getPackageJson},\r\n    \"Ruby\": {url: \"/blob/master/Gemfile\", exe: getGemFile},\r\n    \"Python\": {url: \"/blob/master/setup.py\", exe: getPythonDependencies}\r\n}"],"file":"EvalRepo.js"}